// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weatherData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_weatherData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_weatherData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_weatherData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_weatherData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_weatherData_2eproto;
class WeatherData;
struct WeatherDataDefaultTypeInternal;
extern WeatherDataDefaultTypeInternal _WeatherData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::WeatherData* Arena::CreateMaybeMessage<::WeatherData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum WindDir : int {
  UNSPECIFIED = 0,
  N = 1,
  NE = 2,
  E = 3,
  SE = 4,
  S = 5,
  SW = 6,
  W = 7,
  NW = 8,
  WindDir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WindDir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WindDir_IsValid(int value);
constexpr WindDir WindDir_MIN = UNSPECIFIED;
constexpr WindDir WindDir_MAX = NW;
constexpr int WindDir_ARRAYSIZE = WindDir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindDir_descriptor();
template<typename T>
inline const std::string& WindDir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindDir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindDir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindDir_descriptor(), enum_t_value);
}
inline bool WindDir_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindDir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindDir>(
    WindDir_descriptor(), name, value);
}
// ===================================================================

class WeatherData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WeatherData) */ {
 public:
  inline WeatherData() : WeatherData(nullptr) {}
  ~WeatherData() override;
  explicit PROTOBUF_CONSTEXPR WeatherData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeatherData(const WeatherData& from);
  WeatherData(WeatherData&& from) noexcept
    : WeatherData() {
    *this = ::std::move(from);
  }

  inline WeatherData& operator=(const WeatherData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherData& operator=(WeatherData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeatherData& default_instance() {
    return *internal_default_instance();
  }
  enum TemperatureCase {
    kTemperature = 1,
    _TEMPERATURE_NOT_SET = 0,
  };

  enum UVindexCase {
    kUVindex = 2,
    _UVINDEX_NOT_SET = 0,
  };

  enum HumidityCase {
    kHumidity = 3,
    _HUMIDITY_NOT_SET = 0,
  };

  enum CloudCoverCase {
    kCloudCover = 4,
    _CLOUDCOVER_NOT_SET = 0,
  };

  enum WindSpeedCase {
    kWindSpeed = 5,
    _WINDSPEED_NOT_SET = 0,
  };

  static inline const WeatherData* internal_default_instance() {
    return reinterpret_cast<const WeatherData*>(
               &_WeatherData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WeatherData& a, WeatherData& b) {
    a.Swap(&b);
  }
  inline void Swap(WeatherData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeatherData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeatherData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeatherData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WeatherData& from) {
    WeatherData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WeatherData";
  }
  protected:
  explicit WeatherData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindDirectionFieldNumber = 6,
    kTemperatureFieldNumber = 1,
    kUVindexFieldNumber = 2,
    kHumidityFieldNumber = 3,
    kCloudCoverFieldNumber = 4,
    kWindSpeedFieldNumber = 5,
  };
  // .WindDir windDirection = 6;
  void clear_winddirection();
  ::WindDir winddirection() const;
  void set_winddirection(::WindDir value);
  private:
  ::WindDir _internal_winddirection() const;
  void _internal_set_winddirection(::WindDir value);
  public:

  // int32 temperature = 1;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  int32_t temperature() const;
  void set_temperature(int32_t value);
  private:
  int32_t _internal_temperature() const;
  void _internal_set_temperature(int32_t value);
  public:

  // uint32 UVindex = 2;
  bool has_uvindex() const;
  private:
  bool _internal_has_uvindex() const;
  public:
  void clear_uvindex();
  uint32_t uvindex() const;
  void set_uvindex(uint32_t value);
  private:
  uint32_t _internal_uvindex() const;
  void _internal_set_uvindex(uint32_t value);
  public:

  // uint32 humidity = 3;
  bool has_humidity() const;
  private:
  bool _internal_has_humidity() const;
  public:
  void clear_humidity();
  uint32_t humidity() const;
  void set_humidity(uint32_t value);
  private:
  uint32_t _internal_humidity() const;
  void _internal_set_humidity(uint32_t value);
  public:

  // uint32 cloudCover = 4;
  bool has_cloudcover() const;
  private:
  bool _internal_has_cloudcover() const;
  public:
  void clear_cloudcover();
  uint32_t cloudcover() const;
  void set_cloudcover(uint32_t value);
  private:
  uint32_t _internal_cloudcover() const;
  void _internal_set_cloudcover(uint32_t value);
  public:

  // uint32 windSpeed = 5;
  bool has_windspeed() const;
  private:
  bool _internal_has_windspeed() const;
  public:
  void clear_windspeed();
  uint32_t windspeed() const;
  void set_windspeed(uint32_t value);
  private:
  uint32_t _internal_windspeed() const;
  void _internal_set_windspeed(uint32_t value);
  public:

  void clear__temperature();
  TemperatureCase _temperature_case() const;
  void clear__UVindex();
  UVindexCase _UVindex_case() const;
  void clear__humidity();
  HumidityCase _humidity_case() const;
  void clear__cloudCover();
  CloudCoverCase _cloudCover_case() const;
  void clear__windSpeed();
  WindSpeedCase _windSpeed_case() const;
  // @@protoc_insertion_point(class_scope:WeatherData)
 private:
  class _Internal;
  void set_has_temperature();
  void set_has_uvindex();
  void set_has_humidity();
  void set_has_cloudcover();
  void set_has_windspeed();

  inline bool has__temperature() const;
  inline void clear_has__temperature();

  inline bool has__UVindex() const;
  inline void clear_has__UVindex();

  inline bool has__humidity() const;
  inline void clear_has__humidity();

  inline bool has__cloudCover() const;
  inline void clear_has__cloudCover();

  inline bool has__windSpeed() const;
  inline void clear_has__windSpeed();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int winddirection_;
    union TemperatureUnion {
      constexpr TemperatureUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t temperature_;
    } _temperature_;
    union UVindexUnion {
      constexpr UVindexUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t uvindex_;
    } _UVindex_;
    union HumidityUnion {
      constexpr HumidityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t humidity_;
    } _humidity_;
    union CloudCoverUnion {
      constexpr CloudCoverUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t cloudcover_;
    } _cloudCover_;
    union WindSpeedUnion {
      constexpr WindSpeedUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t windspeed_;
    } _windSpeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[5];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weatherData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WeatherData

// int32 temperature = 1;
inline bool WeatherData::_internal_has_temperature() const {
  return _temperature_case() == kTemperature;
}
inline bool WeatherData::has_temperature() const {
  return _internal_has_temperature();
}
inline void WeatherData::set_has_temperature() {
  _impl_._oneof_case_[0] = kTemperature;
}
inline void WeatherData::clear_temperature() {
  if (_internal_has_temperature()) {
    _impl_._temperature_.temperature_ = 0;
    clear_has__temperature();
  }
}
inline int32_t WeatherData::_internal_temperature() const {
  if (_internal_has_temperature()) {
    return _impl_._temperature_.temperature_;
  }
  return 0;
}
inline void WeatherData::_internal_set_temperature(int32_t value) {
  if (!_internal_has_temperature()) {
    clear__temperature();
    set_has_temperature();
  }
  _impl_._temperature_.temperature_ = value;
}
inline int32_t WeatherData::temperature() const {
  // @@protoc_insertion_point(field_get:WeatherData.temperature)
  return _internal_temperature();
}
inline void WeatherData::set_temperature(int32_t value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:WeatherData.temperature)
}

// uint32 UVindex = 2;
inline bool WeatherData::_internal_has_uvindex() const {
  return _UVindex_case() == kUVindex;
}
inline bool WeatherData::has_uvindex() const {
  return _internal_has_uvindex();
}
inline void WeatherData::set_has_uvindex() {
  _impl_._oneof_case_[1] = kUVindex;
}
inline void WeatherData::clear_uvindex() {
  if (_internal_has_uvindex()) {
    _impl_._UVindex_.uvindex_ = 0u;
    clear_has__UVindex();
  }
}
inline uint32_t WeatherData::_internal_uvindex() const {
  if (_internal_has_uvindex()) {
    return _impl_._UVindex_.uvindex_;
  }
  return 0u;
}
inline void WeatherData::_internal_set_uvindex(uint32_t value) {
  if (!_internal_has_uvindex()) {
    clear__UVindex();
    set_has_uvindex();
  }
  _impl_._UVindex_.uvindex_ = value;
}
inline uint32_t WeatherData::uvindex() const {
  // @@protoc_insertion_point(field_get:WeatherData.UVindex)
  return _internal_uvindex();
}
inline void WeatherData::set_uvindex(uint32_t value) {
  _internal_set_uvindex(value);
  // @@protoc_insertion_point(field_set:WeatherData.UVindex)
}

// uint32 humidity = 3;
inline bool WeatherData::_internal_has_humidity() const {
  return _humidity_case() == kHumidity;
}
inline bool WeatherData::has_humidity() const {
  return _internal_has_humidity();
}
inline void WeatherData::set_has_humidity() {
  _impl_._oneof_case_[2] = kHumidity;
}
inline void WeatherData::clear_humidity() {
  if (_internal_has_humidity()) {
    _impl_._humidity_.humidity_ = 0u;
    clear_has__humidity();
  }
}
inline uint32_t WeatherData::_internal_humidity() const {
  if (_internal_has_humidity()) {
    return _impl_._humidity_.humidity_;
  }
  return 0u;
}
inline void WeatherData::_internal_set_humidity(uint32_t value) {
  if (!_internal_has_humidity()) {
    clear__humidity();
    set_has_humidity();
  }
  _impl_._humidity_.humidity_ = value;
}
inline uint32_t WeatherData::humidity() const {
  // @@protoc_insertion_point(field_get:WeatherData.humidity)
  return _internal_humidity();
}
inline void WeatherData::set_humidity(uint32_t value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:WeatherData.humidity)
}

// uint32 cloudCover = 4;
inline bool WeatherData::_internal_has_cloudcover() const {
  return _cloudCover_case() == kCloudCover;
}
inline bool WeatherData::has_cloudcover() const {
  return _internal_has_cloudcover();
}
inline void WeatherData::set_has_cloudcover() {
  _impl_._oneof_case_[3] = kCloudCover;
}
inline void WeatherData::clear_cloudcover() {
  if (_internal_has_cloudcover()) {
    _impl_._cloudCover_.cloudcover_ = 0u;
    clear_has__cloudCover();
  }
}
inline uint32_t WeatherData::_internal_cloudcover() const {
  if (_internal_has_cloudcover()) {
    return _impl_._cloudCover_.cloudcover_;
  }
  return 0u;
}
inline void WeatherData::_internal_set_cloudcover(uint32_t value) {
  if (!_internal_has_cloudcover()) {
    clear__cloudCover();
    set_has_cloudcover();
  }
  _impl_._cloudCover_.cloudcover_ = value;
}
inline uint32_t WeatherData::cloudcover() const {
  // @@protoc_insertion_point(field_get:WeatherData.cloudCover)
  return _internal_cloudcover();
}
inline void WeatherData::set_cloudcover(uint32_t value) {
  _internal_set_cloudcover(value);
  // @@protoc_insertion_point(field_set:WeatherData.cloudCover)
}

// uint32 windSpeed = 5;
inline bool WeatherData::_internal_has_windspeed() const {
  return _windSpeed_case() == kWindSpeed;
}
inline bool WeatherData::has_windspeed() const {
  return _internal_has_windspeed();
}
inline void WeatherData::set_has_windspeed() {
  _impl_._oneof_case_[4] = kWindSpeed;
}
inline void WeatherData::clear_windspeed() {
  if (_internal_has_windspeed()) {
    _impl_._windSpeed_.windspeed_ = 0u;
    clear_has__windSpeed();
  }
}
inline uint32_t WeatherData::_internal_windspeed() const {
  if (_internal_has_windspeed()) {
    return _impl_._windSpeed_.windspeed_;
  }
  return 0u;
}
inline void WeatherData::_internal_set_windspeed(uint32_t value) {
  if (!_internal_has_windspeed()) {
    clear__windSpeed();
    set_has_windspeed();
  }
  _impl_._windSpeed_.windspeed_ = value;
}
inline uint32_t WeatherData::windspeed() const {
  // @@protoc_insertion_point(field_get:WeatherData.windSpeed)
  return _internal_windspeed();
}
inline void WeatherData::set_windspeed(uint32_t value) {
  _internal_set_windspeed(value);
  // @@protoc_insertion_point(field_set:WeatherData.windSpeed)
}

// .WindDir windDirection = 6;
inline void WeatherData::clear_winddirection() {
  _impl_.winddirection_ = 0;
}
inline ::WindDir WeatherData::_internal_winddirection() const {
  return static_cast< ::WindDir >(_impl_.winddirection_);
}
inline ::WindDir WeatherData::winddirection() const {
  // @@protoc_insertion_point(field_get:WeatherData.windDirection)
  return _internal_winddirection();
}
inline void WeatherData::_internal_set_winddirection(::WindDir value) {
  
  _impl_.winddirection_ = value;
}
inline void WeatherData::set_winddirection(::WindDir value) {
  _internal_set_winddirection(value);
  // @@protoc_insertion_point(field_set:WeatherData.windDirection)
}

inline bool WeatherData::has__temperature() const {
  return _temperature_case() != _TEMPERATURE_NOT_SET;
}
inline void WeatherData::clear_has__temperature() {
  _impl_._oneof_case_[0] = _TEMPERATURE_NOT_SET;
}
inline bool WeatherData::has__UVindex() const {
  return _UVindex_case() != _UVINDEX_NOT_SET;
}
inline void WeatherData::clear_has__UVindex() {
  _impl_._oneof_case_[1] = _UVINDEX_NOT_SET;
}
inline bool WeatherData::has__humidity() const {
  return _humidity_case() != _HUMIDITY_NOT_SET;
}
inline void WeatherData::clear_has__humidity() {
  _impl_._oneof_case_[2] = _HUMIDITY_NOT_SET;
}
inline bool WeatherData::has__cloudCover() const {
  return _cloudCover_case() != _CLOUDCOVER_NOT_SET;
}
inline void WeatherData::clear_has__cloudCover() {
  _impl_._oneof_case_[3] = _CLOUDCOVER_NOT_SET;
}
inline bool WeatherData::has__windSpeed() const {
  return _windSpeed_case() != _WINDSPEED_NOT_SET;
}
inline void WeatherData::clear_has__windSpeed() {
  _impl_._oneof_case_[4] = _WINDSPEED_NOT_SET;
}
inline WeatherData::TemperatureCase WeatherData::_temperature_case() const {
  return WeatherData::TemperatureCase(_impl_._oneof_case_[0]);
}
inline WeatherData::UVindexCase WeatherData::_UVindex_case() const {
  return WeatherData::UVindexCase(_impl_._oneof_case_[1]);
}
inline WeatherData::HumidityCase WeatherData::_humidity_case() const {
  return WeatherData::HumidityCase(_impl_._oneof_case_[2]);
}
inline WeatherData::CloudCoverCase WeatherData::_cloudCover_case() const {
  return WeatherData::CloudCoverCase(_impl_._oneof_case_[3]);
}
inline WeatherData::WindSpeedCase WeatherData::_windSpeed_case() const {
  return WeatherData::WindSpeedCase(_impl_._oneof_case_[4]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WindDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WindDir>() {
  return ::WindDir_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_weatherData_2eproto
